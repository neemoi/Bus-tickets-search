// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Models;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(BtsContext))]
    partial class BtsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("WebApi.Models.Driver", b =>
                {
                    b.Property<uint>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("driver_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("surname");

                    b.HasKey("DriverId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DriverId" }, "driver_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("Distance")
                        .HasColumnType("int unsigned");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("FkDriver")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("FkDriverNavigationDriverId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("FkShedule")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("FkSheduleNavigationSheduleId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("FkTransport")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("FkTransportNavigationTransportId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RouteId");

                    b.HasIndex("FkDriverNavigationDriverId");

                    b.HasIndex("FkSheduleNavigationSheduleId");

                    b.HasIndex("FkTransportNavigationTransportId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("WebApi.Models.Shedule", b =>
                {
                    b.Property<uint>("SheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<TimeOnly>("ArrivalTime")
                        .HasColumnType("time(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time(6)");

                    b.HasKey("SheduleId");

                    b.ToTable("Shedules");
                });

            modelBuilder.Entity("WebApi.Models.Ticket", b =>
                {
                    b.Property<uint>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<int>("FkRouteT")
                        .HasColumnType("int");

                    b.Property<int>("FkRouteTNavigationRouteId")
                        .HasColumnType("int");

                    b.Property<uint>("FkUser")
                        .HasColumnType("int unsigned");

                    b.Property<string>("FkUserNavigationId")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("Price")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Seat")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("FkRouteTNavigationRouteId");

                    b.HasIndex("FkUserNavigationId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("WebApi.Models.Transport", b =>
                {
                    b.Property<uint>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TransportId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("varchar(28)")
                        .HasColumnName("surname");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "user_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Route", b =>
                {
                    b.HasOne("WebApi.Models.Driver", "FkDriverNavigation")
                        .WithMany("Routes")
                        .HasForeignKey("FkDriverNavigationDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Shedule", "FkSheduleNavigation")
                        .WithMany("Routes")
                        .HasForeignKey("FkSheduleNavigationSheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Transport", "FkTransportNavigation")
                        .WithMany("Routes")
                        .HasForeignKey("FkTransportNavigationTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkDriverNavigation");

                    b.Navigation("FkSheduleNavigation");

                    b.Navigation("FkTransportNavigation");
                });

            modelBuilder.Entity("WebApi.Models.Ticket", b =>
                {
                    b.HasOne("WebApi.Models.Route", "FkRouteTNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("FkRouteTNavigationRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.User", "FkUserNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("FkUserNavigationId");

                    b.Navigation("FkRouteTNavigation");

                    b.Navigation("FkUserNavigation");
                });

            modelBuilder.Entity("WebApi.Models.Driver", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("WebApi.Models.Route", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("WebApi.Models.Shedule", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("WebApi.Models.Transport", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
